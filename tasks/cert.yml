---
- name: "{{ letsencrypt_cert.domains[0] }} : Define letsencrypt_command"
  set_fact:
    letsencrypt_command: "{{ letsencrypt_path }} -n --agree-tos  {% if letsencrypt_rsa_key_size is defined %}--rsa-key-size {{ letsencrypt_rsa_key_size }}{% endif %} --text {% for domain in letsencrypt_cert.domains %}-d {{ domain }} {% endfor %}{% if letsencrypt_no_email is defined %}--register-unsafely-without-email{% else %}--email {{ letsencrypt_email }}{% endif %} {% if letsencrypt_server is defined %}--server {{ letsencrypt_server }}{% endif %} --expand"

- name: "{{ letsencrypt_cert.domains[0] }} : Define webroot"
  set_fact:
    webroot: "{% if letsencrypt_cert.webroot is defined %}{{ letsencrypt_cert.webroot }}{% else %}{{ letsencrypt_webroot_path }}{% endif %}"

- name: "{{ letsencrypt_cert.domains[0] }} : Ensure webroot {{ webroot }} exists"
  file:
    path: "{{ webroot }}"
    state: directory
    follow: yes
  become: yes

- name: "{{ letsencrypt_cert.domains[0] }} : Attempt to get the certificate using the webroot authenticator"
  command: "{{ letsencrypt_command }} -a webroot --webroot-path {{ webroot }} certonly"
  become: yes
  args:
    creates: "/etc/letsencrypt/live/{{ letsencrypt_cert.domains[0] }}"
  when: letsencrypt_authenticator == "webroot"
  ignore_errors: True

- name: "{{ letsencrypt_cert.domains[0] }} : Attempt to get the certificate using the standalone authenticator (in case eg the webserver isn't running yet)"
  command: "{{ letsencrypt_command }} -a standalone auth {{ letsencrypt_standalone_command_args }}"
  become: yes
  args:
    creates: "/etc/letsencrypt/live/{{ letsencrypt_cert.domains[0] }}"

- name: "{{ letsencrypt_cert.domains[0] }} : Fix the renewal file"
  ini_file:
    section: renewalparams
    option: "{{ item.key }}"
    value: "{{ item.value }}"
    dest: "/etc/letsencrypt/renewal/{{ letsencrypt_cert.domains[0] }}.conf"
  become: yes
  with_dict:
    os_packages_only: False
    verb: certonly
    noninteractive_mode: False
    uir: False
    hsts: False
    authenticator: '{{ letsencrypt_authenticator }}'

- name: "{{ letsencrypt_cert.domains[0] }} : Fix the webroot map in the renewal file"
  ini_file:
    section: "[webroot_map]"
    option: "{{ item }}"
    value: "{{ webroot }}"
    dest: "/etc/letsencrypt/renewal/{{ letsencrypt_cert.domains[0] }}.conf"
  become: yes
  with_items: "{{ letsencrypt_cert.domains }}"

- name: "{{ letsencrypt_cert.domains[0] }} : Install renewal cron"
  become: yes
  cron:
    name: "Let's Encrypt Renewal"
    day: "{{ letsencrypt_renewal_frequency.day }}"
    hour: "{{ letsencrypt_renewal_frequency.hour }}"
    minute: "{{ letsencrypt_renewal_frequency.minute }}"
    job: "{{letsencrypt_path}} renew --quiet {{ letsencrypt_renewal_command_args }}"

- name: "{{ letsencrypt_cert.domains[0] }} : Create directory for `ssl_certificate` and `ssl_certificate_key`"
  file:
    path: '{{ item }}'
    state: directory
    recurse: yes
  when: letsencrypt_cert.ssl_certificate is defined and letsencrypt_cert.ssl_certificate_key is defined and letsencrypt_cert.ssl_certificate and letsencrypt_cert.ssl_certificate_key
  with_items:
    - "{{ letsencrypt_cert.ssl_certificate|dirname }}"
    - "{{ letsencrypt_cert.ssl_certificate_key|dirname }}"

- name: "{{ letsencrypt_cert.domains[0] }} : Symlink certificates to `ssl_certificate` and `ssl_certificate_key`"
  file:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
    state: link
  when: letsencrypt_cert.ssl_certificate is defined and letsencrypt_cert.ssl_certificate_key is defined and letsencrypt_cert.ssl_certificate and letsencrypt_cert.ssl_certificate_key
  with_items:
    - src: /etc/letsencrypt/live/{{ letsencrypt_cert.domains[0] }}/fullchain.pem
      dest: "{{letsencrypt_cert.ssl_certificate}}"
    - src: /etc/letsencrypt/live/{{ letsencrypt_cert.domains[0] }}/privkey.pem
      dest: "{{letsencrypt_cert.ssl_certificate_key}}"
